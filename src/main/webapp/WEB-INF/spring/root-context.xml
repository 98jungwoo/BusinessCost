<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<context:component-scan base-package="nam.cost.business" />	

	<!-- HikariCP configuration -->
	<bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<!-- 배포할때 -->
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/new_project"/>
		<!-- test할때 -->
		<!-- <property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/> -->
		<!-- <property name="jdbcUrl" value="jdbc:log4jdbc:mysql://localhost:3306/new_project" /> -->
		<property name="username" value="${spring.datasource.username}"/>
		<property name="password" value="${spring.datasource.password}"/> <!--혹시 안되면 직접 입력해서 넣기-->
	</bean>

	<!-- <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<property name="dataSource" ref="hikariDataSource" />
		<property name="configLocation" value="classpath:/configurarion/config.xml" />
		<property name="mapperLocations" value="classpath:/mapper/*.xml" />
	</bean> -->

	<!-- constructor-arg이걸 언제 쓰는지 모르면 오류 확인되는거 보면 됨 -->
	<!-- <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean> -->

	<!-- DataSourceTransactionManager의 의미는 사용해서 자동으로 커밋과 롤백을 사용하겟다. -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<property name="dataSource" ref="hikariDataSource" />
	</bean>

	<!-- driven: 조정자 , annotation-driven: 어노테이션을 생성하거나 도와주는 역할을 한다. 이게 없으면 어노테이션을 
		사용할수가 없다. -->
	<tx:annotation-driven transaction-manager="transactionManager" />

    <!-- JSON 변환을 위한 메시지 컨버터 설정 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
			<!-- List로 감싸는 이유는 여러 가지 형식의 데이터 변환을 지원하기 위해 -->
            <list>
				<!-- JSON 변환기 -->
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <!-- Jackson 라이브러리를 사용하여 JSON 변환 -->
                    <property name="objectMapper">
                        <bean class="com.fasterxml.jackson.databind.ObjectMapper" />
                    </property>
                </bean>
                <!-- 문자열 변환기 -->
				<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
            </list>
        </property>
    </bean>


</beans>
